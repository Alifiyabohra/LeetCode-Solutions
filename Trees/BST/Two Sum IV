class BSTiterator{
    private: stack<TreeNode*>myStack;
    bool isreverse=true;
    //true--> before
    //false-->next
    public:
    BSTiterator(TreeNode* node, bool isreverse){
        this->isreverse=isreverse;
        pushAll(node);
       
    }

    int next(){
        TreeNode* top = myStack.top();
        myStack.pop();
        if(!isreverse)    pushAll(top->right);
        else pushAll(top->left);

        return top->val;
    }
    bool hasNext(){
            return !myStack.empty();
    }
    void pushAll(TreeNode* node){
        while(node){
            myStack.push(node);
            if(isreverse) node=node->right;
            else node= node->left;
        }
    }
 };
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        BSTiterator l(root,false);
        BSTiterator r(root,true);

        int i= l.next();
        int j= r.next();

        while(i<j){
            if(i+j==k)  return true;
            if(i+j < k) i=l.next();
            else    j=r.next();
        }
        return false;
    }
};
