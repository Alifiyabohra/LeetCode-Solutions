vector<vector<int>> levelOrder(TreeNode* root){
        vector<vector<int>>ans;
        if(root==NULL){
            return ans;
        }

        queue<TreeNode*>q;
        q.push(root);

        while(!q.empty()){
            vector<int>row;

            
            int size=q.size();
            

            for(int i=0;i<size;i++){
                TreeNode* front=q.front();
                q.pop();

                row.push_back(front->val);
                if(front->left){
                    q.push(front->left);
                }
                if(front->right){
                    q.push(front->right);
                }
            }
            ans.push_back(row);
        }
        return ans;
    }

//this approach uses extra space for storing NULL so prefer another without NULL approach
  vector<vector<int>> levelOrder(TreeNode* root){
        
        vector<vector<int>>ans;
        vector<int>row;

        if(root==NULL){
            return ans;
        }
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);

        while(!q.empty()){
            TreeNode* front=q.front();
            q.pop();

            if(front==NULL){
                ans.push_back(row);
                row.clear();
                if(!q.empty()){
                    q.push(NULL);
                }
            }
            else{
                row.push_back(front->val);

                if(front->left){
                    q.push(front->left);
                }
                if(front->right){
                    q.push(front->right);
                }
            }
        }
        return ans;
    }
