int solveRec(int row,int col,vector<vector<int>>& arr){
        int m=arr.size();
        int n=arr[0].size();
        //base case
        if(row<0 || col<0 || row>=m || col>=n){
            return 0;
        }
        if(arr[row][col]==1){
            return 0;
        }
        if(col==0 && row ==0){
            return 1;
        }

        int up=solveRec(row-1,col,arr);
        int left=solveRec(row,col-1,arr);

        return left+up;
    }
    int solveMemo(int row,int col,vector<vector<int>>& arr, vector<vector<int>>& dp){
        int m=arr.size();
        int n=arr[0].size();
        //base case
        if(row<0 || col<0 || row>=m || col>=n){
            return 0;
        }
        if(arr[row][col]==1){
            return 0;
        }
        if(col==0 && row ==0){
            return 1;
        }
        if(dp[row][col]!=-1){
            return dp[row][col];
        }
        int up=solveMemo(row-1,col,arr,dp);
        int left=solveMemo(row,col-1,arr,dp);
        dp[row][col]=left+up;
        return dp[row][col];
    }
    int solveTab(vector<vector<int>>& arr){
        int m=arr.size();
        int n= arr[0].size();
        vector<vector<int>>dp(m,vector<int>(n,-1));

        //store base case in dp array, in this we will store basecase in loop, as if we declare outside loop, then also we can't run loop from i=1 and j=1 as [0][0] is not the only cell associated with 0th row and 0th col

        //identify the range, and reverse it
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(arr[i][j]==1){
                    dp[i][j]=0;
                    continue;
                }
                else if(i==0 && j==0){
                    dp[i][j]=1;
                    continue;
                }

                int up= 0;
                int left = 0;
                if(i-1>=0)    up=dp[i-1][j];
                
                if(j-1>=0)    left= dp[i][j-1];
                
                dp[i][j]=left+up;
            }
        }
        return dp[m-1][n-1];
    }
    int solveSO(vector<vector<int>>& arr){
        int m=arr.size();
        int n= arr[0].size();
        vector<int>prev(n,0);

        for(int i=0;i<m;i++){
            vector<int>temp(n,0);
            for(int j=0;j<n;j++){

                if(arr[i][j]==1){
                    temp[j]=0;
                    continue;
                }
                if(i==0 && j==0){
                    temp[0]=1;
                    continue;
                }

                int left = 0;
                int up=prev[j];
                if(j-1>=0)    left= temp[j-1];
                
                temp[j]=left+up;
            }
            prev=temp;
        }
        return prev[n-1];
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        //return usingSO(m,n,obstacleGrid);

        //return usingTab(m,n,obstacleGrid);

        //step1- create 2d dp array
        // vector<vector<int>>dp(m,vector<int>(n,-1));
        // return usingMemo(m-1,n-1,obstacleGrid,dp);

        //return usingRec(m-1,n-1,obstacleGrid);  
        //return solveRec(m-1,n-1,obstacleGrid);

        //vector<vector<int>>dp(m,vector<int>(n,-1));
        //return solveMemo(m-1,n-1,obstacleGrid,dp);
        return solveSO(obstacleGrid);
    }
};
