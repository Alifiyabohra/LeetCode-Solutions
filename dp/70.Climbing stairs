int solveRec(int n){
        //base condition
        if(n==1 || n==0){
            return 1;
        }
        
        int ans= solveRec(n-1)+solveRec(n-2);

        return ans;
    }
    int solveMemo(int n,vector<int>&dp){
        //base condition
        if(n==1 || n==0){
            return 1;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        
        dp[n]= solveMemo(n-1,dp)+solveMemo(n-2,dp);
        
        return dp[n];
    }
    int solvetab(int n){
        vector<int>dp(n+1,0);
        //step1- store base case in dp array
        dp[0]=1;
        if(n==0){
            return dp[0];
        }
        dp[1]=1;
        //step2- reverse the loop
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];
    }
    int solveSO(int n){
        if(n==0){
            return 1;
        }
        int last=1;
        int seclast=1;

        for(int i=2;i<=n;i++){
            int curr=last+seclast;
            seclast=last;
            last=curr;
        }
        return last;
    }
    int climbStairs(int n) {
        //step1- create dp array , pass it to the function
        //vector<int>dp(n+1,-1);

        //return waysTabSO(n);

        return solveSO(n);
       
    }
