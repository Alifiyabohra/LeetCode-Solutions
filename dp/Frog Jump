link--> https://www.naukri.com/code360/problems/frog-jump_3621012?leftPanelTabValue=SUBMISSION
int solveRec(int n,vector<int> &heights){
    //base case
    if(n==0){
        return 0;
    }
    if(n==1){
        return abs(heights[1]-heights[0]);
    }
    //what we will do on each step/index>> We will compare cost to reach its n-1th step and n-2th step
    int cost1=abs(heights[n]-heights[n-1])+solveRec(n-1,heights);
    int cost2=abs(heights[n]-heights[n-2])+solveRec(n-2,heights);

    return min(cost1,cost2);
}
int solveMemo(int n,vector<int> &heights,vector<int>&dp){
    if(n==0){
        return 0;
    }
    if(n==1){
        return abs(heights[1]-heights[0]);
    }
    if(dp[n]!=-1){
        return dp[n];
    }
    //what we will do on each step/index>> We will compare cost to reach its n-1th step and n-2th step
    int cost1=abs(heights[n]-heights[n-1])+solveMemo(n-1,heights,dp);
    int cost2=abs(heights[n]-heights[n-2])+solveMemo(n-2,heights,dp);

    dp[n]=min(cost1,cost2);
    return dp[n];
}
int solveTab(int n,vector<int> &heights){
    vector<int>dp(n+1,0);
    //store base-case in dp
    dp[0]=0;
    if(n==0)    return 0;
    dp[1]=abs(heights[1]-heights[0]);

    for(int i=2;i<=n;i++){
        int cost1=0;
        int cost2=0;
        if(i-1>=0)
        cost1=abs(heights[i]-heights[i-1])+dp[i-1];
        if(i-2>=0)
        cost2=abs(heights[i]-heights[i-2])+dp[i-2];
        dp[i]=min(cost1,cost2);
    }
    return dp[n];
}
int solveSO(int n,vector<int> &heights){
    if(n==0){
        return 0;
    }
    int prev1=0;
    int prev2=abs(heights[1]-heights[0]);

    for(int i=2;i<=n;i++){
        int cost1=0;
        int cost2=0;
        if(i-1>=0)
        cost1=abs(heights[i]-heights[i-1])+prev1;
        if(i-2>=0)
        cost2=abs(heights[i]-heights[i-2])+prev2;
        int curr=min(cost1,cost2);

        prev1=prev2;
        prev2=curr;
    }
    return prev2;
}
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.

    //step1- create dp array
    //vector<int>dp(n,-1);

    
    return solveTab(n-1, heights);
}
