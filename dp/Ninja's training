link-->https://www.naukri.com/code360/problems/ninja-s-training_3621003?leftPanelTabValue=SUBMISSION
int solveRec(int last, int idx,int n,vector<vector<int>> &points){
        if(idx==0){
            int maxi=0;
            for(int i=0;i<3;i++){
                if(last!=i)
                maxi=max(maxi,points[0][i]);
            }
            return maxi;
        }
        int maxi=0;
        
        for(int i=0;i<3;i++){
                if(last!=i){
                int point=points[idx][i]+solveRec(i,idx-1,n,points);
                maxi=max(maxi,point);
                }   
        }
        
        return maxi;   
}
int solveMemo(int last, int idx,vector<vector<int>> &points,vector<vector<int>> &dp){
        if(idx==0){
            int maxi=0;
            for(int i=0;i<3;i++){
                if(last!=i)
                maxi=max(maxi,points[0][i]);
            }
            return maxi;
        }
        if(dp[idx][last]!=-1){
            return dp[idx][last];
        }
        int maxi=0;
        
        for(int i=0;i<3;i++){
                if(last!=i){
                int point=points[idx][i]+solveMemo(i,idx-1,points,dp);
                maxi=max(maxi,point);
                }      
        }

        dp[idx][last]=maxi;
        return dp[idx][last];   
}
int solveTab(int n, vector<vector<int>> & points){
        vector<vector<int>>dp(n,vector<int>(4,0));
        //store base case in dp array
        
        for(int last=0;last<4;last++){
            int maxi=0;
             for(int i=0;i<3;i++){
                    if(last!=i){
                    maxi=max(maxi,points[0][i]);
                    }
            }
            dp[0][last]=maxi;
        }
        
        //reverse the loop range 
        for(int day=1;day<n;day++){
            for(int last=0;last<4;last++){
                int maxi=0;
                for(int i=0;i<3;i++){
                    if(last!=i){
                        int point=points[day][i]+dp[day-1][i];
                        dp[day][last]=max(dp[day][last],point);
                    }
                }
               
            }
        }
    
    return dp[n-1][3];
        
}
int solveSO(int n, vector<vector<int>> & points){
        vector<int>prev(4,0);
        
        //store base case in dp array
        
        for(int last=0;last<4;last++){
            int maxi=0;
             for(int i=0;i<3;i++){
                    if(last!=i){
                    maxi=max(maxi,points[0][i]);
                    }
            }
            prev[last]=maxi;
        }
        
        //reverse the loop range 
        for(int day=1;day<n;day++){
            vector<int>temp(4,0);
            for(int last=0;last<4;last++){
                int maxi=0;
                for(int i=0;i<3;i++){
                    if(last!=i){
                        int point=points[day][i]+prev[i];
                        temp[last]=max(temp[last],point);

                    }
                }
            }
            
            prev=temp;
        }
    
    return prev[3];
        
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
     // return solveRec(3,n-1,n,points);

    //For memo
    //step1- create a dp array
    // vector<vector<int>>dp(n,vector<int>(4,-1));
    //   return solveMemo(3,n-1,points,dp);
      
    //return solveTab(n,points);
      return solveSO(n,points);
    
}
