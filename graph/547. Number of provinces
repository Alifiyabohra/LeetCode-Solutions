link--> https://leetcode.com/problems/number-of-provinces/
class Solution {
public:
    void depth(int node,vector<int>&vis,vector<vector<int>>& adj){
        vis[node]=1;

        for(int i:adj[node]){
            if(!vis[i]){
                depth(i,vis,adj);
            }
        }
    }
    void bfs(int node,vector<int>&vis,vector<vector<int>>& adj){
        queue<int>q;
        q.push(node);

        while(!q.empty()){
            int front=q.front();
            q.pop();

            for(int i:adj[front]){
                if(!vis[i]){
                    vis[i]=1;
                    q.push(i);
                }
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int V=isConnected.size();
        vector<vector<int>>adj(V);
        for(int i=0;i<V;i++){
            for(int j=0;j<V;j++){
                if(isConnected[i][j]!=0){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }

        int count=0;
        vector<int>vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                count++;
                //depth(i,vis,adj);
                bfs(i,vis,adj);
            }
        }
        return count;
    }
};
