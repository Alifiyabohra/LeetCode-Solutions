class Solution {
public:
    int bfs(vector<vector<int>>& grid,vector<vector<int>>& vis,queue<pair<pair<int,int>,int>>& q){
        int tm=0;
        while(!q.empty()){
            auto front=q.front();
            q.pop();
            auto nodes=front.first;
            int time=front.second;
            tm=max(tm,time);
            int r=nodes.first;
            int c=nodes.second;

            int m=grid.size();
            int n=grid[0].size();

            int drow[]={-1,0,+1,0};
            int dcol[]={0,+1,0,-1};

            for(int i=0;i<4;i++){
                int nrow=r+drow[i];
                int ncol=c+dcol[i];
                if(nrow>=0 && ncol>=0 && nrow<m && ncol<n && grid[nrow][ncol]==1 && vis[nrow][ncol]!=2){
                        q.push(make_pair(make_pair(nrow,ncol),time+1));
                        vis[nrow][ncol]=2;
                    }
            }
        }
        return tm;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>>vis(m,vector<int>(n,0));
        
        queue<pair<pair<int,int>,int>>q;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    q.push(make_pair(make_pair(i,j),0));
                    vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
            }
        }

        
        int tm= bfs(grid,vis,q);

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]!=2 && grid[i][j]==1){
                    return -1;
                }
            }
        }

        return tm;
    }
};
