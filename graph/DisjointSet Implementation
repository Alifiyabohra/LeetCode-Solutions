#include<bits/stdc++.h>
using namespace std;

class DisjointSet{
    vector<int>rank,parent,size;
public:
    DisjointSet(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }

    int findUlPar(int node){
        if(parent[node]==node){
            return node;
        }

        return parent[node]=findUlPar(parent[node]);
    }

    void UnionByRank(int u, int v){
        int ulp_u=findUlPar(u);
        int ulp_v=findUlPar(v);

        if(ulp_u == ulp_v){
            return;
        }
        if(rank[ulp_u]>rank[ulp_v]){
            parent[ulp_v]=ulp_u;
        }
        else if(rank[ulp_u]<rank[ulp_v]){
            parent[ulp_u]=ulp_v;
        }
        else{
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
    }
    void UnionBySize(int u, int v){
        int ulp_u=findUlPar(u);
        int ulp_v=findUlPar(v);

        if(ulp_u == ulp_v){
            return;
        }
        if(size[ulp_u]>size[ulp_v]){
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
        else{
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
       
    }
};
int main(){
    DisjointSet ds(7);
    ds.UnionBySize(1,2);
    ds.UnionBySize(2,3);
    ds.UnionBySize(4,5);
    ds.UnionBySize(6,7);
    ds.UnionBySize(5,6);

    if(ds.findUlPar(3)==ds.findUlPar(7)){
        cout<<"same"<<endl;
    }
    else cout<<"not same"<<endl;

    ds.UnionByRank(3,7);

    if(ds.findUlPar(3)==ds.findUlPar(7)){
        cout<<"same"<<endl;
    }
    else cout<<"not same"<<endl;
}
