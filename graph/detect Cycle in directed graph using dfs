class Solution {
  public:
    bool dfs(int node,vector<int>visited,vector<int>pathVisited,vector<vector<int>>&adj,vector<vector<int>> &edges){
        visited[node]=1;
        pathVisited[node]=1;
        
        for(int it:adj[node]){
            if(!visited[it]){
                if(dfs(it,visited,pathVisited,adj,edges)==true){
                    return true;
                }
            }
            else if(pathVisited[it]==true){
                return true;
            }
        }
        
        pathVisited[node]=0;
        return false;
    }
    bool isCyclic(int V, vector<vector<int>> &edges) {
        // code here
        vector<vector<int>>adj(V);
        int n=edges.size();
        for(int i=0;i<n;i++){
            vector<int>edge=edges[i];
            int u=edge[0];
            int v=edge[1];
            
            adj[u].push_back(v);
        }
        
        vector<int>visited(V,0);
        vector<int>pathVisited(V,0);
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(i,visited,pathVisited,adj,edges)==true){
                    return true;
                }
            }
        }
        return false;
    }
};
