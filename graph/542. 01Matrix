class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int m=mat.size();
        int n=mat[0].size();

        queue<pair<pair<int,int>,int>>q;

        vector<vector<int>>visited(m,vector<int>(n,0));
        vector<vector<int>>distance(m,vector<int>(n,0));

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j]==0){
                    q.push({{i,j},0});
                    visited[i][j]=1;
                }
            }
        }

        while(!q.empty()){
            auto front= q.front();
            q.pop();
            int r=front.first.first;
            int c=front.first.second;
            int dist=front.second;
            distance[r][c]=dist;

            int drow[4]={0,-1,0,1};
            int dcol[4]={-1,0,1,0};

            for(int i=0;i<4;i++){
                int nrow=r+drow[i];
                int ncol=c+dcol[i];

                if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && !visited[nrow][ncol] && mat[nrow][ncol]!=0){
                    q.push({{nrow,ncol},dist+1});
                    visited[nrow][ncol]=1;
                }
            }
        }
        return distance;
    }
};
