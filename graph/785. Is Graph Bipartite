class Solution {
public:
    bool dfs(int node, int color,vector<vector<int>>& graph,vector<int>& visited){
        visited[node]=color;

        for(int adjNode:graph[node]){
            if(!visited[adjNode]){
                if(color==0){
                    if(dfs(adjNode,1,graph,visited)==false){
                        return false;
                    }
                }
                else{
                    if(dfs(adjNode,0,graph,visited)==false){
                        return false;
                    }
                }
            }
            else{
                if(visited[adjNode]==visited[node]){
                    return false;
                }
            }
        }
        return true;

    }
    bool isBipartite(vector<vector<int>>& graph) {
        int V=graph.size();
        vector<int>visited(V);

        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(i,0,graph,visited)==false){
                    return false;
                }
            }
        }
        return true;
    }
};
