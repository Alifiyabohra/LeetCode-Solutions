link--> https://www.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1
//Using Set-->
vector<int> dijkstra(int V, vector<vector<int>> &edges, int src){
        vector<vector<pair<int,int>>>adj(V);
        for(auto it:edges){
            int u=it[0];
            int v=it[1];
            int dist=it[2];
            
            adj[u].push_back({v,dist});
            adj[v].push_back({u,dist});
        }
        
        vector<int>dist(V,INT_MAX);
        set<pair<int,int>>st;
        
        st.insert({0,src});
        dist[src]=0;
        
        while(!st.empty()){
            auto front=*st.begin();
        
            int nodeDist=front.first;
            int node=front.second;
            st.erase({nodeDist,node});
            
            for(auto it:adj[node]){
                int adjNode=it.first;
                int adjDist=it.second;
                int totalDist = nodeDist+adjDist;
                
                if(dist[adjNode]>totalDist){
                    if(dist[adjNode]!=INT_MAX){
                        st.erase({dist[adjNode],adjNode});
                    }
                    
                    dist[adjNode]=totalDist;
                    st.insert({totalDist,adjNode});
                }
            }
        }
        return dist;
    }
///Using Priority Queue-->
    // vector<int> dijkstra(int V, vector<vector<int>> &edges, int src){
    //     vector<vector<pair<int,int>>>adj(V);
    //     for(auto it:edges){
    //         int u=it[0];
    //         int v=it[1];
    //         int dist=it[2];
            
    //         adj[u].push_back({v,dist});
    //         adj[v].push_back({u,dist});
    //     }
        
    //     vector<int>dist(V,INT_MAX);
    //     priority_queue<pair<int,int>, vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
    //     pq.push({0,src});
    //     dist[src]=0;
        
    //     while(!pq.empty()){
    //         pair<int,int>front=pq.top();
    //         pq.pop();
    //         int nodeDist=front.first;
    //         int node=front.second;
            
    //         for(auto it:adj[node]){
    //             int adjNode=it.first;
    //             int adjDist=it.second;
    //             int totalDist = nodeDist+adjDist;
                
    //             if(dist[adjNode]>totalDist){
    //                 dist[adjNode]=totalDist;
    //                 pq.push({totalDist,adjNode});
    //             }
    //         }
    //     }
    //     return dist;
    // }
