link--> https://www.geeksforgeeks.org/problems/number-of-distinct-islands/1
class Solution {
  public:
    void dfs(int row,int col,int brow,int bcol,vector<vector<int>>& grid,vector<pair<int,int>>& shape,vector<vector<int>>& visited){
       
        int m=grid.size();
        int n=grid[0].size();
        
        visited[row][col]=1;
        shape.push_back({row-brow, col-bcol});
    
        int drow[]={-1,0,1,0};
        int dcol[]={0,1,0,-1};
        
        for(int i=0;i<4;i++){
            int nrow=row-drow[i];
            int ncol=col-dcol[i];
            
            if(nrow>=0 && ncol>=0 && nrow<m && ncol<n && !visited[nrow][ncol] && grid[nrow][ncol]==1){
                dfs(nrow,ncol,brow,bcol,grid,shape,visited);
            }
        }
    }
    int countDistinctIslands(vector<vector<int>>& grid) {
        // code here
        int m=grid.size();
        int n=grid[0].size();
        
        set<vector<pair<int,int>>>s;
        vector<vector<int>>visited(m,vector<int>(n,0));
       
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1 && !visited[i][j]){
                    vector<pair<int,int>>shape;
                    dfs(i,j,i,j,grid,shape,visited);
                    s.insert(shape);
                }
            }
        }
        
        return s.size();
    }
};
