link-->https://www.geeksforgeeks.org/problems/minimum-spanning-tree/1
int spanningTree(int V, vector<vector<int>>& edges) {
        // code here
        vector<vector<pair<int,int>>>adj(V);
        
        for(auto edge:edges){
            int u=edge[0];
            int v=edge[1];
            int cost=edge[2];
            
            adj[u].push_back({v,cost});
            adj[v].push_back({u,cost});
            
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        vector<int>visited(V,0);
        int sum=0;
        
        pq.push({0,0});
        
        while(!pq.empty()){
            pair<int,int>front = pq.top();
            pq.pop();
            int node=front.second;
            int wt=front.first;
            
            if(visited[node]){
                continue;
            }
                visited[node]=1;
                sum+=wt;
                
                for(auto it:adj[node]){
                    int adjNode=it.first;
                    int adjwt=it.second;
                    
                    if(!visited[adjNode]){
                        pq.push({adjwt,adjNode});
                    }
                }
            
        }
        return sum;
    }
